name: Build App With Pake CLI

on:
  workflow_dispatch:
    inputs:
      platform:
        description: 'platform'
        required: true
        default: 'macos-latest'
        type: choice
        options:
          - 'windows-latest'
          - 'macos-latest'
          - 'ubuntu-20.04'
      url:
        description: '[URL]'
        required: true
      name:
        description: '[Name]'
        required: true
      icon:
        description: '[Icon, Optional]'
        required: false
      width:
        description: '[Width, Optional]'
        required: false
        default: '1200'
      height:
        description: '[Height, Optional]'
        required: false
        default: '780'
      safe_domain:
        description: '[Safe Domain, Optional]'
        required: false
      hide_title_bar:
        description: '[Hide TitleBar, Optional, MacOS only]'
        required: false
        type: boolean
        default: false
      multi_arch:
        description: '[MultiArch, Optional, MacOS only]'
        required: false
        type: boolean
        default: false
      targets:
        description: '[Targets, Optional, Linux only]'
        required: false
        default: 'deb'
        type: choice
        options:
          - 'deb'
          - 'appimage'
          - 'all'

jobs:
  build:
    name: ${{ inputs.platform }}
    runs-on: ${{ inputs.platform }}
    strategy:
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Rust (conditional by platform)
        run: |
          if [ "${{ inputs.platform }}" == "ubuntu-20.04" ]; then
            rustup target add x86_64-unknown-linux-musl;
          elif [ "${{ inputs.platform }}" == "windows-latest" ]; then
            rustup target add x86_64-pc-windows-msvc;
          elif [ "${{ inputs.platform }}" == "macos-latest" ]; then
            rustup target add x86_64-apple-darwin;
          fi

      - name: Install pake-cli locally
        run: |
          npm install pake-cli

      - name: Install dependencies
        run: |
          npm install shelljs
          npm install axios

      - name: Rust cache restore
        uses: actions/cache/restore@v3
        id: cache_store
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/
            node_modules/pake-cli/src-tauri/target/
          key: ${{ inputs.platform }}-cargo-${{ hashFiles('node_modules/pake-cli/src-tauri/Cargo.lock') }}

      - name: Build with pake-cli
        run: |
          node ./script/build_with_pake_cli.js
        env:
          URL: ${{ inputs.url }}
          NAME: ${{ inputs.name }}
          ICON: ${{ inputs.icon }}
          HEIGHT: ${{ inputs.height }}
          WIDTH: ${{ inputs.width }}
          HIDE_TITLE_BAR: ${{ inputs.hide_title_bar }}
          MULTI_ARCH: ${{ inputs.multi_arch }}
          TARGETS: ${{ inputs.targets }}
          SAFE_DOMAIN: ${{ inputs.safe_domain }}

      - name: Verify output files
        run: |
          echo "Checking output directory..."
          ls -la node_modules/pake-cli/output || echo "Output directory does not exist or is empty."

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: output-${{ inputs.platform }}.zip
          path: dist/*
          retention-days: 3
          if-no-files-found: error

      - name: Rust cache store
        uses: actions/cache/save@v3
        if: steps.cache_store.outputs.cache-hit != 'true'
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/
            node_modules/pake-cli/src-tauri/target/
          key: ${{ inputs.platform }}-cargo-${{ hashFiles('node_modules/pake-cli/src-tauri/Cargo.lock') }}
